ggplot(p2b,aes(x=p2b)) + geom_histogram(binwidth=0.1)+geom_vline(xintercept = 0.05, color="red")+
theme(axis.title.x = element_text(size=20),axis.text.x= element_text(size=15),axis.title.y = element_text(size=20),axis.text.y= element_text(size=15))
ggsave(file='2b.png', width=5, heigh=5, dpi=300)
#Q2(b)
p2b = NULL
for (i in 1:10000){
X2b = rnorm(100)
z = (sum(X2b>0)-50)/5
p2b[i] = pnorm(z)
}
p2b = data.frame(p2b)
ggplot(p2b,aes(x=p2b)) + geom_histogram(binwidth=0.1)+geom_vline(xintercept = 0.05, color="red")+
theme(axis.title.x = element_text(size=20),axis.text.x= element_text(size=15),axis.title.y = element_text(size=20),axis.text.y= element_text(size=15))
ggsave(file='2b.png', width=5, heigh=5, dpi=300)
p2b = NULL
for (i in 1:10000){
X2b = rnorm(100)
z = (sum(X2b>0)-50)/5
p2b[i] = pnorm(z)
}
p2b = data.frame(p2b)
ggplot(p2b,aes(x=p2b)) + geom_histogram(binwidth=0.75)+geom_vline(xintercept = 0.05, color="red")+
theme(axis.title.x = element_text(size=20),axis.text.x= element_text(size=15),axis.title.y = element_text(size=20),axis.text.y= element_text(size=15))
ggsave(file='2b.png', width=5, heigh=5, dpi=300)
p2b = NULL
for (i in 1:10000){
X2b = rnorm(100)
z = (sum(X2b>0)-50)/5
p2b[i] = pnorm(z)
}
p2b = data.frame(p2b)
ggplot(p2b,aes(x=p2b)) + geom_histogram(binwidth=0.075)+geom_vline(xintercept = 0.05, color="red")+
theme(axis.title.x = element_text(size=20),axis.text.x= element_text(size=15),axis.title.y = element_text(size=20),axis.text.y= element_text(size=15))
ggsave(file='2b.png', width=5, heigh=5, dpi=300)
library("tcltk", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
pt(2.341. 44)
pt(2.341, 44)
1- pt(2.341, 44)
qt(0.975, 44)
qnorm(0.995)
pnorm(0)
pnorm(1,96)
pnorm(1.96)
pnorm(2.576)
pnorm(2.5)
pnorm(2.58)
data0 = read.table('waterbuck.txt', header=T)$waterbuck
data1 = read.table('impala.txt', header=T)$impala
setwd("~/Google Drive/STAT221/STAT221/HW4")
data0 = read.table('waterbuck.txt', header=T)$waterbuck
data1 = read.table('impala.txt', header=T)$impala
prob <- function(N, data, log=F){
result = 0
S = sum(data)
n = length(data)
for (i in 1:n){
result = result + lchoose(N, data[i])
}
#result = result/N*beta(S+1, n*N-S+1)
result = result - log(N) + lbeta(S+1, n*N-S+1)
if (log){
return result
}
exp(result)
}
margin <- function(data, log=F){
diff = 100
result = 0
N = max(data)
count = 0
while(diff > 1e-18){
diff = prob(N, data)
result = result + diff
count = count + 1
N = N+1
}
result
}
prob.theory <- function(data, margin){
N = max(data)
result = 0
for (n in N:100){
result = result + prob(n, data)/margin
}
return (1 - result)
}
margin.waterbuck = margin(data0)
data0 = read.table('waterbuck.txt', header=T)$waterbuck
data1 = read.table('impala.txt', header=T)$impala
prob <- function(N, data, log=F){
result = 0
S = sum(data)
n = length(data)
for (i in 1:n){
result = result + lchoose(N, data[i])
}
#result = result/N*beta(S+1, n*N-S+1)
result = result - log(N) + lbeta(S+1, n*N-S+1)
if (log){
return result
}
exp(result)
}
margin <- function(data, log=F){
diff = 100
result = 0
N = max(data)
count = 0
while(diff > 1e-18){
diff = prob(N, data)
result = result + diff
count = count + 1
N = N+1
}
result
}
prob.theory <- function(data, margin){
N = max(data)
result = 0
for (n in N:100){
result = result + prob(n, data)/margin
}
return (1 - result)
}
#R code for 1.5 Pset4
data0 = read.table('waterbuck.txt', header=T)$waterbuck
data1 = read.table('impala.txt', header=T)$impala
prob <- function(N, data, log=F){
result = 0
S = sum(data)
n = length(data)
for (i in 1:n){
result = result + lchoose(N, data[i])
}
#result = result/N*beta(S+1, n*N-S+1)
result = result - log(N) + lbeta(S+1, n*N-S+1)
if (log){
return (result)
}
exp(result)
}
margin <- function(data, log=F){
diff = 100
result = 0
N = max(data)
count = 0
while(diff > 1e-18){
diff = prob(N, data)
result = result + diff
count = count + 1
N = N+1
}
result
}
prob.theory <- function(data, margin){
N = max(data)
result = 0
for (n in N:100){
result = result + prob(n, data)/margin
}
return (1 - result)
}
margin.waterbuck = margin(data0)
margin.impala = margin(data1)
margin.impala
margin.waterbuck
for(i in 1:nchains) {
}
#MCMC for Stat221 Pset4
#select the dataset to run
args <- as.numeric(commandArgs(trailingOnly = TRUE))
if(length(args) != 1) {
args[1] = 1
}
job.id = args[1]
select = 0
if (job.id > 10){
select = 1
}
library(MASS)
library(scales)
sample.data <- function(n, N, theta) {
rbinom(n, N, theta)
}
get.data <- function(n){
#get waterbucks data if n==0
#get impala data if n==1
if (n==0){
return (read.table('waterbuck.txt', header=T)$waterbuck)
}
if (n==1){
return(read.table('impala.txt', header=T)$impala)
}
}
log.lik <- function(N, theta, Y) {
# Log-likelihood of the data
sum(dbinom(Y, N, theta, log = T))
}
log.prior <- function(N, theta) {
log(1/N)
}
log.posterior <- function(N, theta, Y) {
log.lik(N, theta, Y) + log.prior(N, theta)
}
rpropose <- function(N.old, theta.old, y){
S.old = N.old * theta.old
S.new = rbeta(1, theta.old*c.s, c.s-theta.old*c.s)*N.old
theta.new = rbeta(1, theta.old*c.t, c.t-theta.old*c.t)
#theta.new = rbeta(1, 6, 6)
N.new = ceiling(S.new/theta.new)
while(N.new <= max(y) || N.new > 10000){
theta.new = rbeta(1, theta.old*c.t, c.t-theta.old*c.t)
#theta.new = rbeta(1, 6, 6)
N.new = round(S.new/theta.new)
}
c(N.new, theta.new)
}
log.dpropose <- function(N.old, theta.old, N.new, theta.new){
dbeta(theta.new, theta.old*c.t, c.t-theta.old*c.t, log=T)+
dbeta(N.new*theta.new/N.old, theta.old*c.s, c.s-theta.old*c.s, log=T)
#dbeta(theta.new, 6, 6, log=T)+
# dbeta(N.new*theta.new/N.old, theta.old*c.s, c.s-theta.old*c.s, log=T)
}
rpropose1 <- function(N.old, theta.old, y){
S.old = N.old * theta.old
S.new = rbeta(1, theta.old*c.s, c.s-theta.old*c.s)*N.old
N.new = rpois(1, N.old)
#N.new = round(rnorm(1, N.old, 3))
theta.new = S.new/N.new
while(N.new <= max(y) || theta.new >= 1){
N.new = rpois(1, N.old)
#N.new = round(rnorm(1, N.old, 3))
theta.new = S.new/N.new
}
#theta.new = min(1-1e-10, theta.new)
c(N.new, theta.new)
}
log.dpropose1 <- function(N.old, theta.old, N.new, theta.new){
dpois(N.new, N.old, log=T)+
dbeta(N.new*theta.new/N.old, theta.old*c.s, c.s-theta.old*c.s, log=T)
#dnorm(N.new, N.old, 3, log=T)+
dbeta(N.new*theta.new/N.old, theta.old*c.s, c.s-theta.old*c.s, log=T)
}
#
#
#
# propose2 <- function(N.old, theta.old, y){
#   print(N.old)
#   print(theta.old)
#   S.old = N.old * theta.old
#   S.new = rbeta(1, theta.old*c.s, c.s-theta.old*c.s)*N.old
#   theta.new = rnorm(1, theta.old, 0.01)
#   N.new = ceiling(S.new/theta.new)
#   while(N.new <= max(y)){
#     theta.new = theta.new = rnorm(1, theta.old, 0.01)
#     N.new = ceiling(S.new/theta.new)
#   }
#   c(N.new, theta.new)
# }
#
# log.dpropose2 <- function(N.old, theta.old, N.new, theta.new){
#   dnorm(theta.new, theta.old, 0.01, log=T)+
#     dbeta(N.new*theta.new/N.old, theta.old*c.s, c.s-theta.old*c.s, log=T)
# }
# plot.chain <- function(mcmc.chain) {
#   mcmc.niters = nrow(mcmc.chain)
#   burnin = 0.4 * mcmc.niters
#   mcmc.chain = mcmc.chain[burnin:mcmc.niters, ]
#   f = kde2d(x=mcmc.chain[, 1], y=mcmc.chain[, 2], n=100)
#   image(f, xlim=c(0, NBound), ylim=c(0, thetaBound))
# }
plot.chain2 <- function(mcmc.chain){
mcmc.niters = nrow(mcmc.chain)
burnin = 0.3 * mcmc.niters
mcmc.chain = mcmc.chain[burnin:mcmc.niters, ]
cutoff = quantile(mcmc.chain, 0.90)
mcmc.chain = data.frame(mcmc.chain)
mcmc.chain = mcmc.chain[which(mcmc.chain$X1 < cutoff),]
f = kde2d(x=mcmc.chain[, 1], y=mcmc.chain[, 2], n=100)
plot(mcmc.chain$X1, mcmc.chain$X2, col = alpha('black', 0.005), xlab='N', ylab='theta')
contour(f, col='red', lwd=2.5, add=TRUE)
}
mcmc <- function(y, mcmc.niters=1e5, rpropose, dpropose) {
# Complete with MH.
S = sum(y)
n = length(y)
y.max = max(y)
mcmc.chain <- matrix(nrow=mcmc.niters, ncol=2)
mcmc.chain[1, ] = c(max(ceiling(S/n*2), y.max), 0.5)
nacc <- 0
for(i in 2:mcmc.niters) {
# 1. Current state
N.old = mcmc.chain[i-1, 1]
theta.old = mcmc.chain[i-1, 2]
# 2. Propose new state
param.new = rpropose(N.old, theta.old, y)
N.new = param.new[1]
theta.new = param.new[2]
# 3. Ratio
mh.ratio = min(0, log.posterior(N.new, theta.new, y) -
log.posterior(N.old, theta.old, y) +
log.dpropose(N.new, theta.new, N.old, theta.old) -
log.dpropose(N.old, theta.old, N.new, theta.new))
if(runif(1) < exp(mh.ratio)) {
# Accept
mcmc.chain[i, ] <- c(N.new, theta.new)
nacc <- nacc + 1
} else {
mcmc.chain[i, ] <- c(N.old, theta.old)
}
}
# Cut the burnin period.
print(sprintf("Acceptance ratio %.2f%%", 100 * nacc / mcmc.niters))
#plot.chain2(mcmc.chain)
return(list(mcmc.chain, 100 * nacc / mcmc.niters))
}
# r <- function(N.new, theta.new, N.old, theta.old){
#   # sample N2 from pois(N1)
#   r1 = dpois(N.old, N.new)
#   # sample theta2 uniformly
#   r2 = dunif(theta.old, theta.new^(5/4), theta.new^(4/5))
#   return(log(r1 * r2))
# }
#
# sample.post <- function(N.old, theta.old, y){
#   while(TRUE){
#     N.new = rpois(1, N.old)
#     if(N.new>=max(y)){
#       break
#     }
#   }
#   theta.new = runif(1, theta.old^(5/4), theta.old^(4/5))
#   return(c(N.new, theta.new))
# }
c.s = 1000
c.t = 400
data = get.data(select)
mcmc.chain = mcmc(data,mcmc.niters=1e6,rpropose = rpropose, dpropose = log.dpropose)
#mcmc.chain = mcmc(data, mcmc.niters=1e5, rpropose = rpropose1, dpropose = log.dpropose1)
#mcmc.chain = mcmc(data, mcmc.niters=1e5, rpropose = sample.post, dpropose = r)
jpeg(filename=sprintf("mcmc_job_%d.jpg", job.id), width=900, height=600)
plot.chain2(mcmc.chain[[1]])
dev.off()
accept = mcmc.chain[[2]]
mcmc.chain = mcmc.chain[[1]]
save(accept, mcmc.chain, file=sprintf("mcmc_job_%d.rda", job.id))
mh.draws = mcmc.chain[((nrow(mcmc.chain)*0.3):nrow(mcmc.chain)),]
mcmc.chain <- coda::mcmc(mh.draws)
autocorr.plot(mcmc.chain)
margin <- function(data, log=F){
diff = 100
result = 0
N = max(data)
count = 0
last = 0
while(diff > 1e-18){
result = result + prob(N, data)
N = N+1
diff = 1/exp(last) - 1/exp(result)
last = result
}
1/exp(result)
}
#R code for 1.5 Pset4
data0 = read.table('waterbuck.txt', header=T)$waterbuck
data1 = read.table('impala.txt', header=T)$impala
prob <- function(N, data, log=F){
result = 0
S = sum(data)
n = length(data)
for (i in 1:n){
result = result + lchoose(N, data[i])
}
#result = result/N*beta(S+1, n*N-S+1)
result = result - log(N) + lbeta(S+1, n*N-S+1)
if (log){
return (result)
}
exp(result)
}
margin <- function(data, log=F){
diff = 100
result = 0
N = max(data)
count = 0
last = 0
while(diff > 1e-18){
result = result + prob(N, data)
N = N+1
diff = 1/exp(last) - 1/exp(result)
last = result
}
1/exp(result)
}
prob.theory <- function(data, margin){
N = max(data)
result = 0
for (n in N:100){
result = result + prob(n, data)/margin
}
return (1 - result)
}
margin.waterbuck = margin(data0)
margin <- function(data, log=F){
diff = 100
result = 0
N = max(data)
count = 0
last = 0
while(diff > 1e-18){
result = result + prob(N, data)
N = N+1
diff = 1/exp(last) - 1/exp(result)
last = result
count = count + 1
}
print(count)
1/exp(result)
}
margin.waterbuck = margin(data0)
margin <- function(data, log=F){
diff = 100
result = 0
N = max(data)
count = 0
last = 0
while(diff > 1e-18){
result = result + prob(N, data)
N = N+1
diff = 1/last - 1/result
last = result
count = count + 1
}
print(count)
1/result
}
margin.waterbuck = margin(data0)
margin <- function(data, log=F){
diff = 100
result = 0
N = max(data)
count = 0
last = 0
while(diff > 1e-18){
result = result + prob(N, data)
N = N+1
diff = 1/last - 1/result
last = result
count = count + 1
if(diff < 1)
print(1)
if(diff<1e-5)
print(5)
}
print(count)
1/result
}
margin.waterbuck = margin(data0)
margin <- function(data, log=F){
diff = 100
result = 0
N = max(data)
count = 0
last = 0
while(diff > 1e-18){
result = result + prob(N, data)
N = N+1
diff = 1/last - 1/result
last = result
count = count + 1
if(diff<1e-5)
print(5)
}
print(count)
1/result
}
p.theory.waterbuck = prob.theory(data0, margin.waterbuck)
margin.waterbuck = margin(data0)
margin <- function(data, log=F){
diff = 100
result = 0
N = max(data)
count = 0
last = 0
while(diff > 1e-5){
result = result + prob(N, data)
N = N+1
diff = 1/last - 1/result
last = result
count = count + 1
if(diff<1e-5)
print(5)
}
print(count)
1/result
}
margin.waterbuck = margin(data0)
margin.waterbuck
margin.impala = margin(data1)
margin.impala
prob.theory <- function(data, margin){
N = max(data)
result = 0
for (n in N:100){
result = result + prob(n, data)*margin
}
return (1 - result)
}
p.theory.waterbuck = prob.theory(data0, margin.waterbuck)
p.theory.impala = prob.theory(data1, margin.impala)
p.theory.waterbuck
p.theory.impala
