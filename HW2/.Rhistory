J = 50
source("poissonLogN_MCMC.R")
source("Lan_Tian_ps2_functions.R")
mu = c(1.6, 2.5, 5.2, 4.9)
std = c(0.7, 1.3, 1.3, 1.6)
Ntheta = 5 #number of theta drawn from each (mu,std) pair
Ny = 10   #number of Y drawn from each theta
J = 50
w = rep(1, J)
thetaList = list()
coverage95List = list()
coverage68List = list()
i = 1
coverage95 = matrix(nrow = J, ncol = Ntheta)
coverage68 = matrix(nrow = J, ncol = Ntheta)
theta = matrix(nrow = J, ncol = Ntheta)
for (nt in 1:Ntheta){
theta0 = rnorm(J, mean = mu[i], sd = std[i])
Covered95 = matrix(nrow=J, ncol=Ny)
Covered68 = matrix(nrow=J, ncol=Ny)
for (ny in 1:Ny){
Y = simYgivenTheta(theta0, w)
postTheta = poisson.logn.mcmc(Y, w)[["logLambda"]]
Covered95[,ny] = isCovered95(postTheta, theta0)
Covered68[,ny] = isCovered68(postTheta, theta0)
}
coverage95[,nt] = rowSums(Covered95)/Ny
coverage68[,nt] = rowSums(Covered68)/Ny
theta[,nt] = theta0
}
thetaList[[i]] = theta
coverage95List[[i]] = coverage95
coverage68List[[i]] = coverage68
coverage68List
i = 1
nt = 1
ny = 1
mu = c(1.6, 2.5, 5.2, 4.9)
std = c(0.7, 1.3, 1.3, 1.6)
Ntheta = 5 #number of theta drawn from each (mu,std) pair
Ny = 10   #number of Y drawn from each theta
J = 50
w = rep(1, J)
thetaList = list()
coverage95List = list()
coverage68List = list()
coverage95 = matrix(nrow = J, ncol = Ntheta)
coverage68 = matrix(nrow = J, ncol = Ntheta)
theta = matrix(nrow = J, ncol = Ntheta)
theta0 = rnorm(J, mean = mu[i], sd = std[i])
Covered95 = matrix(nrow=J, ncol=Ny)
Covered68 = matrix(nrow=J, ncol=Ny)
Y = simYgivenTheta(theta0, w)
source("poissonLogN_MCMC.R")
source("Lan_Tian_ps2_functions.R")
Y = simYgivenTheta(theta0, w)
Y = simYgivenTheta(theta0, w, 2)
postTheta = poisson.logn.mcmc(Y, w)[["logLambda"]]
Covered95[,ny] = isCovered95(postTheta, theta0)
theta0
hist(theta0)
w
Y = simYgivenTheta(theta0, w, 2)
mu = c(1.6, 2.5, 5.2, 4.9)
std = c(0.7, 1.3, 1.3, 1.6)
Ntheta = 5 #number of theta drawn from each (mu,std) pair
Ny = 10   #number of Y drawn from each theta
J = 50
w = rep(1, J)
logthetaList = list()
coverage95List = list()
coverage68List = list()
i = 1
nt = 1
coverage95 = matrix(nrow = J, ncol = Ntheta)
coverage68 = matrix(nrow = J, ncol = Ntheta)
logtheta = matrix(nrow = J, ncol = Ntheta)
logtheta0 = rnorm(J, mean = mu[i], sd = std[i])
Covered95 = matrix(nrow=J, ncol=Ny)
Covered68 = matrix(nrow=J, ncol=Ny)
for (ny in 1:Ny){
theta0 = exp(logtheta0)
Y = simYgivenTheta(theta0, w, 2)
postlogtheta = poisson.logn.mcmc(Y, w)[["logLambda"]]
Covered95[,ny] = isCovered95(postlogtheta, logtheta0)
Covered68[,ny] = isCovered68(postlogtheta, logtheta0)
}
source("poissonLogN_MCMC.R")
source("Lan_Tian_ps2_functions.R")
for (ny in 1:Ny){
theta0 = exp(logtheta0)
Y = simYgivenTheta(theta0, w, 2)
postlogtheta = poisson.logn.mcmc(Y, w)[["logLambda"]]
Covered95[,ny] = isCovered95(postlogtheta, logtheta0)
Covered68[,ny] = isCovered68(postlogtheta, logtheta0)
}
ny = 1
hist(logtheta0)
theta0 = exp(logtheta0)
Y = simYgivenTheta(theta0, w, 2)
Y
postlogtheta = poisson.logn.mcmc(Y, w)[["logLambda"]]
postlogtheta = poisson.logn.mcmc(Y, w)#[["logLambda"]]
postlogtheta
postlogtheta.index
names(postlogtheta)
postlogtheta[[LogTheta]]
postlogtheta[['LogTheta']]
postlogtheta[['ndraws']]
postlogtheta[['Y']]
theta0 = exp(logtheta0)
Y = simYgivenTheta(theta0, w, 2)
postlogtheta = poisson.logn.mcmc(Y, w)#[["logTheta"]]
names(postlogtheta)
postlogtheta$mu
postlogtheta$logTheta
theta0 = exp(logtheta0)
Y = simYgivenTheta(theta0, w, 2)
postlogtheta = poisson.logn.mcmc(Y, w)[["logTheta"]]
postlogtheta
Covered95[,ny] = isCovered95(postlogtheta, logtheta0)
Covered68[,ny] = isCovered68(postlogtheta, logtheta0)
View(Covered95)
for (ny in 1:Ny){
logtheta0 = rnorm(J, mean = mu[i], sd = std[i])
Covered95 = matrix(nrow=J, ncol=Ny)
Covered68 = matrix(nrow=J, ncol=Ny)
for (ny in 1:Ny){
theta0 = exp(logtheta0)
Y = simYgivenTheta(theta0, w, 2)
postlogtheta = poisson.logn.mcmc(Y, w)[["logTheta"]]
Covered95[,ny] = isCovered95(postlogtheta, logtheta0)
Covered68[,ny] = isCovered68(postlogtheta, logtheta0)
}
}
nt = 1
logtheta0 = rnorm(J, mean = mu[i], sd = std[i])
Covered95 = matrix(nrow=J, ncol=Ny)
Covered68 = matrix(nrow=J, ncol=Ny)
for (ny in 1:Ny){
theta0 = exp(logtheta0)
Y = simYgivenTheta(theta0, w, 2)
postlogtheta = poisson.logn.mcmc(Y, w)[["logTheta"]]
Covered95[,ny] = isCovered95(postlogtheta, logtheta0)
Covered68[,ny] = isCovered68(postlogtheta, logtheta0)
}
View(Covered95)
View(Covered68)
coverage95[,nt] = rowSums(Covered95)/Ny
coverage68[,nt] = rowSums(Covered68)/Ny
logtheta[,nt] = logtheta0
View(coverage68)
View(Covered95)
View(coverage68)
View(coverage95)
source("poissonLogN_MCMC.R")
source("Lan_Tian_ps2_functions.R")
mu = c(1.6, 2.5, 5.2, 4.9)
std = c(0.7, 1.3, 1.3, 1.6)
Ntheta = 2 #number of theta drawn from each (mu,std) pair
Ny = 10   #number of Y drawn from each theta
J = 20
w = rep(1, J)
logthetaList = list()
coverage95List = list()
coverage68List = list()
i = 1
coverage95 = matrix(nrow = J, ncol = Ntheta)
coverage68 = matrix(nrow = J, ncol = Ntheta)
logtheta = matrix(nrow = J, ncol = Ntheta)
for (nt in 1:Ntheta){
logtheta0 = rnorm(J, mean = mu[i], sd = std[i])
Covered95 = matrix(nrow=J, ncol=Ny)
Covered68 = matrix(nrow=J, ncol=Ny)
for (ny in 1:Ny){
theta0 = exp(logtheta0)
Y = simYgivenTheta(theta0, w, 2)
postlogtheta = poisson.logn.mcmc(Y, w)[["logTheta"]]
Covered95[,ny] = isCovered95(postlogtheta, logtheta0)
Covered68[,ny] = isCovered68(postlogtheta, logtheta0)
}
coverage95[,nt] = rowSums(Covered95)/Ny
coverage68[,nt] = rowSums(Covered68)/Ny
logtheta[,nt] = logtheta0
}
logthetaList[[i]] = logtheta
coverage95List[[i]] = coverage95
coverage68List[[i]] = coverage68
View(logtheta)
View(Covered95)
View(Covered68)
View(coverage68)
View(coverage95)
coverage95List
#PSet 2  Task 3
source("poissonLogN_MCMC.R")
source("Lan_Tian_ps2_functions.R")
mu = c(1.6, 2.5, 5.2, 4.9)
std = c(0.7, 1.3, 1.3, 1.6)
Ntheta = 2 #number of theta drawn from each (mu,std) pair
Ny = 10   #number of Y drawn from each theta
J = 20
w = rep(1, J)
logthetaList = list()
coverage95List = list()
coverage68List = list()
for (i in 1:length(mu)){
coverage95 = matrix(nrow = J, ncol = Ntheta)
coverage68 = matrix(nrow = J, ncol = Ntheta)
logtheta = matrix(nrow = J, ncol = Ntheta)
for (nt in 1:Ntheta){
logtheta0 = rnorm(J, mean = mu[i], sd = std[i])
Covered95 = matrix(nrow=J, ncol=Ny)
Covered68 = matrix(nrow=J, ncol=Ny)
for (ny in 1:Ny){
theta0 = exp(logtheta0)
Y = simYgivenTheta(theta0, w, 2)
postlogtheta = poisson.logn.mcmc(Y, w)[["logTheta"]]
Covered95[,ny] = isCovered95(postlogtheta, logtheta0)
Covered68[,ny] = isCovered68(postlogtheta, logtheta0)
}
coverage95[,nt] = rowSums(Covered95)/Ny
coverage68[,nt] = rowSums(Covered68)/Ny
logtheta[,nt] = logtheta0
}
logthetaList[[i]] = logtheta
coverage95List[[i]] = coverage95
coverage68List[[i]] = coverage68
}
save(logthetaList, coverage95List, coverage68List, file='test')
load('test')
coverage95
coverage95List
logthetaList
coverage95List[[2]]
coverage95List[[2]][,1]
logthetaList[[2]][,1]
hist(logthetaList[[2]][,1])
hist(logthetaList[[3]][,1])
hist(logthetaList[4]][,1])
hist(logthetaList[1]][,1])
hist(logthetaList[[1]][,1])
hist(logthetaList[[4]][,1])
hist(logthetaList[[5]][,1])
hist(logthetaList[[4]][,1])
hist(logthetaList[[3]][,1])
hist(logthetaList[[2]][,1])
hist(logthetaList[[1]][,1])
hist(logthetaList[[2]][,1])
hist(logthetaList[[3]][,1])
hist(logthetaList[[4]][,1])
mu = c(1.6, 2.5, 5.2, 4.9)
std = c(0.7, 1.3, 1.3, 1.6)
Ntheta = 1 #number of theta drawn from each (mu,std) pair  4
Ny = 5   #number of Y drawn from each theta  25
J = 50
w = rep(1, J)
logthetaList = list()
coverage95List = list()
coverage68List = list()
meanList = list()
stdList = list()
for (i in 1:length(mu)){
coverage95 = matrix(nrow = J, ncol = Ntheta)
coverage68 = matrix(nrow = J, ncol = Ntheta)
logtheta = matrix(nrow = J, ncol = Ntheta)
means = matrix(nrow = J, ncol = (Ntheta*Ny))
std = matrix(nrow = J, ncol = (Ntheta*Ny))
for (nt in 1:Ntheta){
logtheta0 = rnorm(J, mean = mu[i], sd = std[i])
Covered95 = matrix(nrow=J, ncol=Ny)
Covered68 = matrix(nrow=J, ncol=Ny)
for (ny in 1:Ny){
theta0 = exp(logtheta0)
Y = simYgivenTheta(theta0, w, 2)
postlogtheta = poisson.logn.mcmc(Y, w)[["logTheta"]]
Covered95[,ny] = isCovered95(postlogtheta, logtheta0)
Covered68[,ny] = isCovered68(postlogtheta, logtheta0)
means[, (nt-1)*Ny+ny] = rowMeans(postlogtheta)
stds[, (nt-1)*Ny+ny] = apply(postlogtheta, 1, sd)
}
coverage95[,nt] = rowSums(Covered95)/Ny
coverage68[,nt] = rowSums(Covered68)/Ny
logtheta[,nt] = logtheta0
}
logthetaList[[i]] = logtheta
coverage95List[[i]] = coverage95
coverage68List[[i]] = coverage68
meanList[[i]] = means
stdsList[[i]] = stds
}
#logthetaList:each element is a matrix of logtheta(1 (mu, sigma) pair), each column 25 sim combined
#coverage95List:each element is a matrix(1 (mu, sigma) pair), each column the coverage by 25 sim combined
save(logthetaList, coverage95List, coverage68List, file=sprintf("out/coverage_%d.rda", job.id))
source('~/Documents/STAT221/pset2_posted/Answer/R/lan_tian_ps2_task3.R')
source("poissonLogN_MCMC.R")
source("Lan_Tian_ps2_functions.R")
mu = c(1.6, 2.5, 5.2, 4.9)
std = c(0.7, 1.3, 1.3, 1.6)
Ntheta = 1 #number of theta drawn from each (mu,std) pair  4
Ny = 5   #number of Y drawn from each theta  25
J = 50
w = rep(1, J)
logthetaList = list()
coverage95List = list()
coverage68List = list()
meanList = list()
stdList = list()
for (i in 1:length(mu)){
coverage95 = matrix(nrow = J, ncol = Ntheta)
coverage68 = matrix(nrow = J, ncol = Ntheta)
logtheta = matrix(nrow = J, ncol = Ntheta)
means = matrix(nrow = J, ncol = (Ntheta*Ny))
std = matrix(nrow = J, ncol = (Ntheta*Ny))
for (nt in 1:Ntheta){
logtheta0 = rnorm(J, mean = mu[i], sd = std[i])
Covered95 = matrix(nrow=J, ncol=Ny)
Covered68 = matrix(nrow=J, ncol=Ny)
for (ny in 1:Ny){
theta0 = exp(logtheta0)
Y = simYgivenTheta(theta0, w, 2)
postlogtheta = poisson.logn.mcmc(Y, w)[["logTheta"]]
Covered95[,ny] = isCovered95(postlogtheta, logtheta0)
Covered68[,ny] = isCovered68(postlogtheta, logtheta0)
means[, (nt-1)*Ny+ny] = rowMeans(postlogtheta)
stds[, (nt-1)*Ny+ny] = apply(postlogtheta, 1, sd)
}
coverage95[,nt] = rowSums(Covered95)/Ny
coverage68[,nt] = rowSums(Covered68)/Ny
logtheta[,nt] = logtheta0
}
logthetaList[[i]] = logtheta
coverage95List[[i]] = coverage95
coverage68List[[i]] = coverage68
meanList[[i]] = means
stdsList[[i]] = stds
}
source("poissonLogN_MCMC.R")
source("Lan_Tian_ps2_functions.R")
mu = c(1.6, 2.5, 5.2, 4.9)
std = c(0.7, 1.3, 1.3, 1.6)
Ntheta = 1 #number of theta drawn from each (mu,std) pair  4
Ny = 5   #number of Y drawn from each theta  25
J = 50
w = rep(1, J)
logthetaList = list()
coverage95List = list()
coverage68List = list()
meanList = list()
stdList = list()
for (i in 1:length(mu)){
coverage95 = matrix(nrow = J, ncol = Ntheta)
coverage68 = matrix(nrow = J, ncol = Ntheta)
logtheta = matrix(nrow = J, ncol = Ntheta)
means = matrix(nrow = J, ncol = (Ntheta*Ny))
std = matrix(nrow = J, ncol = (Ntheta*Ny))
for (nt in 1:Ntheta){
logtheta0 = rnorm(J, mean = mu[i], sd = std[i])
Covered95 = matrix(nrow=J, ncol=Ny)
Covered68 = matrix(nrow=J, ncol=Ny)
for (ny in 1:Ny){
theta0 = exp(logtheta0)
Y = simYgivenTheta(theta0, w, 2)
postlogtheta = poisson.logn.mcmc(Y, w)[["logTheta"]]
Covered95[,ny] = isCovered95(postlogtheta, logtheta0)
Covered68[,ny] = isCovered68(postlogtheta, logtheta0)
means[, (nt-1)*Ny+ny] = rowMeans(postlogtheta)
stds[, (nt-1)*Ny+ny] = apply(postlogtheta, 1, sd)
}
coverage95[,nt] = rowSums(Covered95)/Ny
coverage68[,nt] = rowSums(Covered68)/Ny
logtheta[,nt] = logtheta0
}
logthetaList[[i]] = logtheta
coverage95List[[i]] = coverage95
coverage68List[[i]] = coverage68
meanList[[i]] = means
stdsList[[i]] = stds
}
warnings()
source("poissonLogN_MCMC.R")
source("Lan_Tian_ps2_functions.R")
mu = c(1.6, 2.5, 5.2, 4.9)
std = c(0.7, 1.3, 1.3, 1.6)
Ntheta = 1 #number of theta drawn from each (mu,std) pair  4
Ny = 5   #number of Y drawn from each theta  25
J = 50
w = rep(1, J)
logthetaList = list()
coverage95List = list()
coverage68List = list()
meansList = list()
stdsList = list()
for (i in 1:length(mu)){
coverage95 = matrix(nrow = J, ncol = Ntheta)
coverage68 = matrix(nrow = J, ncol = Ntheta)
logtheta = matrix(nrow = J, ncol = Ntheta)
means = matrix(nrow = J, ncol = (Ntheta*Ny))
stds = matrix(nrow = J, ncol = (Ntheta*Ny))
for (nt in 1:Ntheta){
logtheta0 = rnorm(J, mean = mu[i], sd = std[i])
Covered95 = matrix(nrow=J, ncol=Ny)
Covered68 = matrix(nrow=J, ncol=Ny)
for (ny in 1:Ny){
theta0 = exp(logtheta0)
Y = simYgivenTheta(theta0, w, 2)
postlogtheta = poisson.logn.mcmc(Y, w)[["logTheta"]]
Covered95[,ny] = isCovered95(postlogtheta, logtheta0)
Covered68[,ny] = isCovered68(postlogtheta, logtheta0)
means[, (nt-1)*Ny+ny] = rowMeans(postlogtheta)
stds[, (nt-1)*Ny+ny] = apply(postlogtheta, 1, sd)
}
coverage95[,nt] = rowSums(Covered95)/Ny
coverage68[,nt] = rowSums(Covered68)/Ny
logtheta[,nt] = logtheta0
}
logthetaList[[i]] = logtheta
coverage95List[[i]] = coverage95
coverage68List[[i]] = coverage68
meansList[[i]] = means
stdsList[[i]] = stds
}
load("/Users/tianlan/down/coverage_10.rda")
load("/Users/tianlan/down/coverage_1.rda")
coverage95List
coverage68List
load("/Users/tianlan/Documents/STAT221/pset2_posted/Answer/STAT221HW2/out/coverage_1.rda")
coverage95[[1]]
coverageList95[[1]]
coverage95List[[1]]
4*2*25*12
3%4
3%%4
4%%4
11%%4
job.id = 4
select = job.id%%4
if (select == 0)
select = 4
mu = c(1.6, 2.5, 5.2, 4.9)
std = c(0.7, 1.3, 1.3, 1.6)
mu = mu[select]
std = std[select]
Ntheta = 2 #number of theta drawn
Ny = 10   #number of Y drawn from each theta
J = 50
w = rep(1, J)
coverage95 = matrix(nrow = J, ncol = Ntheta)
coverage68 = matrix(nrow = J, ncol = Ntheta)
logtheta = matrix(nrow = J, ncol = Ntheta)
means = matrix(nrow = J, ncol = (Ntheta*Ny))
stds = matrix(nrow = J, ncol = (Ntheta*Ny))
for (nt in 1:Ntheta){
logtheta0 = rnorm(J, mean = mu, sd = std)
Covered95 = matrix(nrow=J, ncol=Ny)
Covered68 = matrix(nrow=J, ncol=Ny)
for (ny in 1:Ny){
theta0 = exp(logtheta0)
Y = simYgivenTheta(theta0, w, 2)
postlogtheta = poisson.logn.mcmc(Y, w)[["logTheta"]]
Covered95[,ny] = isCovered95(postlogtheta, logtheta0)
Covered68[,ny] = isCovered68(postlogtheta, logtheta0)
means[, (nt-1)*Ny+ny] = rowMeans(postlogtheta)
stds[, (nt-1)*Ny+ny] = apply(postlogtheta, 1, sd)
}
coverage95[,nt] = rowSums(Covered95)/Ny
coverage68[,nt] = rowSums(Covered68)/Ny
logtheta[,nt] = logtheta0
}
source("poissonLogN_MCMC.R")
source("Lan_Tian_ps2_functions.R")
coverage95 = matrix(nrow = J, ncol = Ntheta)
coverage68 = matrix(nrow = J, ncol = Ntheta)
logtheta = matrix(nrow = J, ncol = Ntheta)
means = matrix(nrow = J, ncol = (Ntheta*Ny))
stds = matrix(nrow = J, ncol = (Ntheta*Ny))
for (nt in 1:Ntheta){
logtheta0 = rnorm(J, mean = mu, sd = std)
Covered95 = matrix(nrow=J, ncol=Ny)
Covered68 = matrix(nrow=J, ncol=Ny)
for (ny in 1:Ny){
theta0 = exp(logtheta0)
Y = simYgivenTheta(theta0, w, 2)
postlogtheta = poisson.logn.mcmc(Y, w)[["logTheta"]]
Covered95[,ny] = isCovered95(postlogtheta, logtheta0)
Covered68[,ny] = isCovered68(postlogtheta, logtheta0)
means[, (nt-1)*Ny+ny] = rowMeans(postlogtheta)
stds[, (nt-1)*Ny+ny] = apply(postlogtheta, 1, sd)
}
coverage95[,nt] = rowSums(Covered95)/Ny
coverage68[,nt] = rowSums(Covered68)/Ny
logtheta[,nt] = logtheta0
}
setwd("~/Documents/STAT221/STAT221/HW2")
save(job.id, logtheta, coverage95, coverage68, means, stds, file=sprintf("out/coverage_%d.rda", job.id))
coverage95
coverage68
means
logtheta
load("/Users/tianlan/Documents/STAT221/STAT221/HW2/out/coverage_4.rda")
coverage95
logtheta
coverage68
job.id = 3
select = job.id%%4
if (select == 0)
select = 4
mu = c(1.6, 2.5, 5.2, 4.9)
std = c(0.7, 1.3, 1.3, 1.6)
mu = mu[select]
std = std[select]
load("/Users/tianlan/Documents/STAT221/STAT221/HW2/out/coverage_4.rda")
