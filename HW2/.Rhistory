Covered68 = matrix(nrow=J, ncol=Ny)
for (ny in 1:Ny){
theta0 = exp(logtheta0)
Y = simYgivenTheta(theta0, w, 2)
postlogtheta = poisson.logn.mcmc(Y, w)[["logTheta"]]
Covered95[,ny] = isCovered95(postlogtheta, logtheta0)
Covered68[,ny] = isCovered68(postlogtheta, logtheta0)
means[, (nt-1)*Ny+ny] = rowMeans(postlogtheta)
stds[, (nt-1)*Ny+ny] = apply(postlogtheta, 1, sd)
}
coverage95[,nt] = rowSums(Covered95)/Ny
coverage68[,nt] = rowSums(Covered68)/Ny
logtheta[,nt] = logtheta0
}
logthetaList[[i]] = logtheta
coverage95List[[i]] = coverage95
coverage68List[[i]] = coverage68
meansList[[i]] = means
stdsList[[i]] = stds
}
load("/Users/tianlan/down/coverage_10.rda")
load("/Users/tianlan/down/coverage_1.rda")
coverage95List
coverage68List
load("/Users/tianlan/Documents/STAT221/pset2_posted/Answer/STAT221HW2/out/coverage_1.rda")
coverage95[[1]]
coverageList95[[1]]
coverage95List[[1]]
4*2*25*12
3%4
3%%4
4%%4
11%%4
job.id = 4
select = job.id%%4
if (select == 0)
select = 4
mu = c(1.6, 2.5, 5.2, 4.9)
std = c(0.7, 1.3, 1.3, 1.6)
mu = mu[select]
std = std[select]
Ntheta = 2 #number of theta drawn
Ny = 10   #number of Y drawn from each theta
J = 50
w = rep(1, J)
coverage95 = matrix(nrow = J, ncol = Ntheta)
coverage68 = matrix(nrow = J, ncol = Ntheta)
logtheta = matrix(nrow = J, ncol = Ntheta)
means = matrix(nrow = J, ncol = (Ntheta*Ny))
stds = matrix(nrow = J, ncol = (Ntheta*Ny))
for (nt in 1:Ntheta){
logtheta0 = rnorm(J, mean = mu, sd = std)
Covered95 = matrix(nrow=J, ncol=Ny)
Covered68 = matrix(nrow=J, ncol=Ny)
for (ny in 1:Ny){
theta0 = exp(logtheta0)
Y = simYgivenTheta(theta0, w, 2)
postlogtheta = poisson.logn.mcmc(Y, w)[["logTheta"]]
Covered95[,ny] = isCovered95(postlogtheta, logtheta0)
Covered68[,ny] = isCovered68(postlogtheta, logtheta0)
means[, (nt-1)*Ny+ny] = rowMeans(postlogtheta)
stds[, (nt-1)*Ny+ny] = apply(postlogtheta, 1, sd)
}
coverage95[,nt] = rowSums(Covered95)/Ny
coverage68[,nt] = rowSums(Covered68)/Ny
logtheta[,nt] = logtheta0
}
source("poissonLogN_MCMC.R")
source("Lan_Tian_ps2_functions.R")
coverage95 = matrix(nrow = J, ncol = Ntheta)
coverage68 = matrix(nrow = J, ncol = Ntheta)
logtheta = matrix(nrow = J, ncol = Ntheta)
means = matrix(nrow = J, ncol = (Ntheta*Ny))
stds = matrix(nrow = J, ncol = (Ntheta*Ny))
for (nt in 1:Ntheta){
logtheta0 = rnorm(J, mean = mu, sd = std)
Covered95 = matrix(nrow=J, ncol=Ny)
Covered68 = matrix(nrow=J, ncol=Ny)
for (ny in 1:Ny){
theta0 = exp(logtheta0)
Y = simYgivenTheta(theta0, w, 2)
postlogtheta = poisson.logn.mcmc(Y, w)[["logTheta"]]
Covered95[,ny] = isCovered95(postlogtheta, logtheta0)
Covered68[,ny] = isCovered68(postlogtheta, logtheta0)
means[, (nt-1)*Ny+ny] = rowMeans(postlogtheta)
stds[, (nt-1)*Ny+ny] = apply(postlogtheta, 1, sd)
}
coverage95[,nt] = rowSums(Covered95)/Ny
coverage68[,nt] = rowSums(Covered68)/Ny
logtheta[,nt] = logtheta0
}
setwd("~/Documents/STAT221/STAT221/HW2")
save(job.id, logtheta, coverage95, coverage68, means, stds, file=sprintf("out/coverage_%d.rda", job.id))
coverage95
coverage68
means
logtheta
load("/Users/tianlan/Documents/STAT221/STAT221/HW2/out/coverage_4.rda")
coverage95
logtheta
coverage68
job.id = 3
select = job.id%%4
if (select == 0)
select = 4
mu = c(1.6, 2.5, 5.2, 4.9)
std = c(0.7, 1.3, 1.3, 1.6)
mu = mu[select]
std = std[select]
load("/Users/tianlan/Documents/STAT221/STAT221/HW2/out/coverage_4.rda")
w = read.table('weights.txt')
View(w)
source("poissonLogN_MCMC.R")
source("Lan_Tian_ps2_functions.R")
source("rASL.R")
job.id = 3
job.id = 3
source("poissonLogN_MCMC.R")
source("Lan_Tian_ps2_functions.R")
source("rASL.R")
w = read.table('weights.txt')
select = job.id%%4
if (select == 0)
select = 4
x0 = c(1.6, 1.6, 1.6, 1.6)
m = c(0, -0.7, 0.7, 0)
b = c(1.3, 1.3, 1.3, 2.6)
x0 = x0[select]
m = m[select]
b = b[select]
Ntheta = 3 #number of theta drawn
Ny = 40   #number of Y drawn from each theta
J = 1000
coverage95 = matrix(nrow = J, ncol = Ntheta)
coverage68 = matrix(nrow = J, ncol = Ntheta)
logtheta = matrix(nrow = J, ncol = Ntheta)
means = matrix(nrow = J, ncol = (Ntheta*Ny))
stds = matrix(nrow = J, ncol = (Ntheta*Ny))
logtheta0 = rASL(J, x0, m, b)
Covered95 = matrix(nrow=J, ncol=Ny)
Covered68 = matrix(nrow=J, ncol=Ny)
theta0
logtheta0
w = read.table('weights.txt')
View(w)
job.id = 2
source("poissonLogN_MCMC.R")
source("Lan_Tian_ps2_functions.R")
w = read.table('weights.txt')
select = job.id%%4
if (select == 0)
select = 4
mu = c(1.6, 2.5, 5.2, 4.9)
std = c(0.7, 1.3, 1.3, 1.6)
mu = mu[select]
std = std[select]
Ntheta = 3 #number of theta drawn
Ny = 40   #number of Y drawn from each theta
J = 1000
coverage95 = matrix(nrow = J, ncol = Ntheta)
coverage68 = matrix(nrow = J, ncol = Ntheta)
logtheta = matrix(nrow = J, ncol = Ntheta)
means = matrix(nrow = J, ncol = (Ntheta*Ny))
stds = matrix(nrow = J, ncol = (Ntheta*Ny))
logtheta0 = rnorm(J, mean = mu, sd = std)
Covered95 = matrix(nrow=J, ncol=Ny)
Covered68 = matrix(nrow=J, ncol=Ny)
theta0 = exp(logtheta0)
Y = simYgivenTheta(theta0, w, 2)
w*theta
w*theta0
test = w*theta0
test = data.Frame(test)
test = data.frame(test)
test[test<0]
simYgivenTheta(theta0, w, 2)
length(theta)
length(theta0)
length(w)
w
length(w)
class(w)
class(w.value)
class(w.value())
class(value(w))
w[[1]]
class(w[[1]])
source("poissonLogN_MCMC.R")
source("Lan_Tian_ps2_functions.R")
w = read.table('weights.txt')[[1]]
theta0 = exp(logtheta0)
Y = simYgivenTheta(theta0, w, 2)
postlogtheta = poisson.logn.mcmc(Y, w)[["logTheta"]]
Y
source("poissonLogN_MCMC.R")
source("Lan_Tian_ps2_functions.R")
library(compiler)
test = compfun(simYgiventheta)
test = cmpfun(simYgiventheta)
test = cmpfun(simYgivenTheta)
w = 1:1000
test = cmpfun(simYgivenTheta)
logtheta0 = rnorm(1000, 1, 1)
Y = simYgivenTheta(theta0, w, 2)
theta0 = exp(logtheta0)
Y = simYgivenTheta(theta0, w, 2)
compare <- microbenchmark(test(theta0, w, 2), simYgivenTheta(theta0, w, 2), times = 1000)
library(microbenchmark)
install.packages('microbenchmark')
library(microbenchmark)
compare <- microbenchmark(test(theta0, w, 2), simYgivenTheta(theta0, w, 2), times = 1000)
compare
simYgivenTheta = cmpfun(simYgivenTheta)
compare <- microbenchmark(test(theta0, w, 2), simYgivenTheta(theta0, w, 2), times = 1000)
compare
test = cmpfun(poisson.logn.mcmc)
compare <- microbenchmark(test(Y, w, 2), poisson.logn.mcmc(Y, w, 2), times = 10)
compare
thetaMHStep ＝ cmpfun(thetaMHStep)
thetaMHStep＝cmpfun(thetaMHStep)
cmpfun(thetaMHStep)
thetaMHStep ＝ cmpfun(thetaMHStep)
thetaInit = cmpfun(thetaInit)
thetaMHStep = cmpfun(thetaMHStep)
thetaInit = cmpfun(thetaInit)
thetaMHStep = cmpfun(thetaMHStep)
thetaInit = cmpfun(thetaInit)
thetaMHStep = cmpfun(thetaMHStep)
test = cmpfun(poisson.logn.mcmc)
thetaPost = cmpfun(thetaPost)
dp.dtheta = cmpfun(dp.dtheta)
d2p.dtheta2 = cmpfun(d2p.dtheta2)
d3p.dtheta3 = cmpfun(d3p.dtheta3)
compare <- microbenchmark(poisson.logn.mcmc(Y, w, 2), times = 10)
compare
source("poissonLogN_MCMC.R")
source("Lan_Tian_ps2_functions.R")
compare <- microbenchmark(poisson.logn.mcmc(Y, w, 2), times = 10)
compare
source("poissonLogN_MCMC.R")
source("Lan_Tian_ps2_functions.R")
library(compiler)
test = poisson.logn.mcmc
thetaInit = cmpfun(thetaInit)
thetaMHStep = cmpfun(thetaMHStep)
test = cmpfun(poisson.logn.mcmc)
thetaPost = cmpfun(thetaPost)
dp.dtheta = cmpfun(dp.dtheta)
d2p.dtheta2 = cmpfun(d2p.dtheta2)
d3p.dtheta3 = cmpfun(d3p.dtheta3)
simYgivenTheta = cmpfun(simYgivenTheta)
poisson.logn.mcmc = cmpfun(poisson.logn.mcmc)
compare <- microbenchmark(poisson.logn.mcmc(Y, w, 2),test(Y,w,2), times = 10)
compare
source("poissonLogN_MCMC.R")
source("Lan_Tian_ps2_functions.R")
logtheta0 = rnorm(1000, 1, 1)
theta0 = exp(logtheta0)
Y = simYgivenTheta(theta0, w, 2)
poisson.logn.mcmc(Y, w, 2)
test = poisson.logn.mcmc
compare <- microbenchmark(test(Y,w,2), times = 20)
compare
compare <- microbenchmark(test(Y,w), times = 2)
compare
thetaInit = cmpfun(thetaInit)
thetaMHStep = cmpfun(thetaMHStep)
test = cmpfun(poisson.logn.mcmc)
thetaPost = cmpfun(thetaPost)
dp.dtheta = cmpfun(dp.dtheta)
d2p.dtheta2 = cmpfun(d2p.dtheta2)
d3p.dtheta3 = cmpfun(d3p.dtheta3)
simYgivenTheta = cmpfun(simYgivenTheta)
poisson.logn.mcmc = cmpfun(poisson.logn.mcmc)
compare <- microbenchmark(poisson.logn.mcmc(Y,w), times = 5)
compare
simYgivenTheta = cmpfun(simYgivenTheta)
logtheta0 = rnorm(1000, 1, 1)
theta0 = exp(logtheta0)
compare <- microbenchmark(simYgivenTheta(theta0, w, 2), times = 1000)
compare
source("poissonLogN_MCMC.R")
source("Lan_Tian_ps2_functions.R")
library(compiler)
library(microbenchmark)
w = 1:1000
logtheta0 = rnorm(1000, 1, 1)
theta0 = exp(logtheta0)
logtheta0 = rnorm(J, mean = mu, sd = std)
J = 1000
logtheta0 = rnorm(J, mean = mu, sd = std)
mu = 1
sd = 1
logtheta0 = rnorm(1000, 1, 1)
theta0 = exp(logtheta0)
logtheta0 = rnorm(J, mean = mu, sd = std)
std = 1
logtheta0 = rnorm(1000, 1, 1)
theta0 = exp(logtheta0)
logtheta0 = rnorm(J, mean = mu, sd = std)
Covered95 = matrix(nrow=J, ncol=Ny)
Covered68 = matrix(nrow=J, ncol=Ny)
theta0 = exp(logtheta0)
Y = simYgivenTheta(theta0, w, 2)
postlogtheta = poisson.logn.mcmc(Y, w)[["logTheta"]]
compare <- microbenchmark(isCovered68(postlogtheta, logtheta0), times = 1000)
compare <- microbenchmark(isCovered68(postlogtheta, logtheta0), times = 50)
compare
Ntheta = 3 #number of theta drawn
Ny = 5   #number of Y drawn from each theta
J = 50
w = rep(1, J)
coverage95 = matrix(nrow = J, ncol = Ntheta)
coverage68 = matrix(nrow = J, ncol = Ntheta)
logtheta = matrix(nrow = J, ncol = Ntheta)
means = matrix(nrow = J, ncol = (Ntheta*Ny))
stds = matrix(nrow = J, ncol = (Ntheta*Ny))
for (nt in 1:Ntheta){
logtheta0 = rnorm(J, mean = mu, sd = std)
logtheta[,nt] = logtheta0
}
coverage95 = apply(logtheta0, 2, getRate95, J, Ny)
getRate95 <- function(theta0, J, Ny){
Covered95 = matrix(nrow=J, ncol=Ny)
for (ny in 1:Ny){
theta0 = exp(logtheta0)
Y = simYgivenTheta(theta0, w, 2)
postlogtheta = poisson.logn.mcmc(Y, w)[["logTheta"]]
Covered95[,ny] = isCovered95(postlogtheta, logtheta0)
means[, (nt-1)*Ny+ny] = rowMeans(postlogtheta)
stds[, (nt-1)*Ny+ny] = apply(postlogtheta, 1, sd)
}
coverage95col = rowSums(Covered95)/Ny
return coverage95col
}
getRate95 <- function(theta0, J, Ny){
Covered95 = matrix(nrow=J, ncol=Ny)
for (ny in 1:Ny){
theta0 = exp(logtheta0)
Y = simYgivenTheta(theta0, w, 2)
postlogtheta = poisson.logn.mcmc(Y, w)[["logTheta"]]
Covered95[,ny] = isCovered95(postlogtheta, logtheta0)
means[, (nt-1)*Ny+ny] = rowMeans(postlogtheta)
stds[, (nt-1)*Ny+ny] = apply(postlogtheta, 1, sd)
}
coverage95col = rowSums(Covered95)/Ny
return (coverage95col)
}
coverage95 = apply(logtheta0, 2, getRate95, J, Ny)
logtheta0
coverage95 = apply(logtheta, 2, getRate95, J, Ny)
View(coverage95)
select = job.id%%4
if (select == 0)
select = 4
mu = c(1.6, 2.5, 5.2, 4.9)
std = c(0.7, 1.3, 1.3, 1.6)
mu = mu[select]
std = std[select]
job.id = 3
source("poissonLogN_MCMC.R")
source("Lan_Tian_ps2_functions.R")
library(compiler)
getRate95 <- function(theta0, J, Ny){
Covered95 = matrix(nrow=J, ncol=Ny)
for (ny in 1:Ny){
theta0 = exp(logtheta0)
Y = simYgivenTheta(theta0, w, 2)
postlogtheta = poisson.logn.mcmc(Y, w)[["logTheta"]]
Covered95[,ny] = isCovered95(postlogtheta, logtheta0)
means[, (nt-1)*Ny+ny] = rowMeans(postlogtheta)
stds[, (nt-1)*Ny+ny] = apply(postlogtheta, 1, sd)
}
coverage95col = rowSums(Covered95)/Ny
return (coverage95col)
}
select = job.id%%4
if (select == 0)
select = 4
mu = c(1.6, 2.5, 5.2, 4.9)
std = c(0.7, 1.3, 1.3, 1.6)
mu = mu[select]
std = std[select]
Ntheta = 3 #number of theta drawn
Ny = 5   #number of Y drawn from each theta
J = 50
w = rep(1, J)
coverage95 = matrix(nrow = J, ncol = Ntheta)
coverage68 = matrix(nrow = J, ncol = Ntheta)
logtheta = matrix(nrow = J, ncol = Ntheta)
means = matrix(nrow = J, ncol = (Ntheta*Ny))
stds = matrix(nrow = J, ncol = (Ntheta*Ny))
for (nt in 1:Ntheta){
logtheta0 = rnorm(J, mean = mu, sd = std)
logtheta[,nt] = logtheta0
}
vectorized <-function{
coverage95 = apply(logtheta, 2, getRate95, J, Ny)
vectorized <-function{
coverage95 = apply(logtheta, 2, getRate95, J, Ny)
vectorized <-function(){
coverage95 = apply(logtheta, 2, getRate95, J, Ny)
}
forloop <- function(){
for (nt in 1:Ntheta){
Covered95 = matrix(nrow=J, ncol=Ny)
for (ny in 1:Ny){
theta0 = exp(logtheta0)
Y = simYgivenTheta(theta0, w, 2)
postlogtheta = poisson.logn.mcmc(Y, w)[["logTheta"]]
Covered95[,ny] = isCovered95(postlogtheta, logtheta0)
means[, (nt-1)*Ny+ny] = rowMeans(postlogtheta)
stds[, (nt-1)*Ny+ny] = apply(postlogtheta, 1, sd)
}
coverage95[,nt] = rowSums(Covered95)/Ny
logtheta[,nt] = logtheta0
}
}
#PSet 2  Task 3
job.id = 2
source("poissonLogN_MCMC.R")
source("Lan_Tian_ps2_functions.R")
library(compiler)
getRate95 <- function(theta0, J, Ny){
Covered95 = matrix(nrow=J, ncol=Ny)
for (ny in 1:Ny){
theta0 = exp(logtheta0)
Y = simYgivenTheta(theta0, w, 2)
postlogtheta = poisson.logn.mcmc(Y, w)[["logTheta"]]
Covered95[,ny] = isCovered95(postlogtheta, logtheta0)
means[, (nt-1)*Ny+ny] = rowMeans(postlogtheta)
stds[, (nt-1)*Ny+ny] = apply(postlogtheta, 1, sd)
}
coverage95col = rowSums(Covered95)/Ny
return (coverage95col)
}
select = job.id%%4
if (select == 0)
select = 4
mu = c(1.6, 2.5, 5.2, 4.9)
std = c(0.7, 1.3, 1.3, 1.6)
mu = mu[select]
std = std[select]
Ntheta = 3 #number of theta drawn
Ny = 5   #number of Y drawn from each theta
J = 50
w = rep(1, J)
coverage95 = matrix(nrow = J, ncol = Ntheta)
coverage68 = matrix(nrow = J, ncol = Ntheta)
logtheta = matrix(nrow = J, ncol = Ntheta)
means = matrix(nrow = J, ncol = (Ntheta*Ny))
stds = matrix(nrow = J, ncol = (Ntheta*Ny))
for (nt in 1:Ntheta){
logtheta0 = rnorm(J, mean = mu, sd = std)
logtheta[,nt] = logtheta0
}
vectorized <-function(){
coverage95 = apply(logtheta, 2, getRate95, J, Ny)
}
forloop <- function(){
for (nt in 1:Ntheta){
Covered95 = matrix(nrow=J, ncol=Ny)
for (ny in 1:Ny){
theta0 = exp(logtheta0)
Y = simYgivenTheta(theta0, w, 2)
postlogtheta = poisson.logn.mcmc(Y, w)[["logTheta"]]
Covered95[,ny] = isCovered95(postlogtheta, logtheta0)
means[, (nt-1)*Ny+ny] = rowMeans(postlogtheta)
stds[, (nt-1)*Ny+ny] = apply(postlogtheta, 1, sd)
}
coverage95[,nt] = rowSums(Covered95)/Ny
logtheta[,nt] = logtheta0
}
}
library(microbenchmark)
compare(vetorized, forloop, times=2)
compare = microbenchmark(vetorized, forloop, times=2)
compare = microbenchmark(vectorized, forloop, times=2)
compare
Ntheta = 3 #number of theta drawn
Ny =  25  #number of Y drawn from each theta
J = 50
w = rep(1, J)
coverage95 = matrix(nrow = J, ncol = Ntheta)
coverage68 = matrix(nrow = J, ncol = Ntheta)
logtheta = matrix(nrow = J, ncol = Ntheta)
means = matrix(nrow = J, ncol = (Ntheta*Ny))
stds = matrix(nrow = J, ncol = (Ntheta*Ny))
for (nt in 1:Ntheta){
logtheta0 = rnorm(J, mean = mu, sd = std)
logtheta[,nt] = logtheta0
}
compare = microbenchmark(vectorized, forloop, times=2)
compare = microbenchmark(vectorized, forloop, times=10)
compare
forloop <- function(){
for (nt in 1:Ntheta){
Covered95 = matrix(nrow=J, ncol=Ny)
theta0 = exp(logtheta[, nt])
for (ny in 1:Ny){
Y = simYgivenTheta(theta0, w, 2)
postlogtheta = poisson.logn.mcmc(Y, w)[["logTheta"]]
Covered95[,ny] = isCovered95(postlogtheta, logtheta0)
means[, (nt-1)*Ny+ny] = rowMeans(postlogtheta)
stds[, (nt-1)*Ny+ny] = apply(postlogtheta, 1, sd)
}
coverage95[,nt] = rowSums(Covered95)/Ny
logtheta[,nt] = logtheta0
}
}
compare = microbenchmark(vectorized, forloop, times=10)
compare
